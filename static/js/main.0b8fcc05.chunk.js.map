{"version":3,"sources":["App.js","Components/MessageForm.js","Components/BitcoinAddress.js","Components/BitcoinAddressTable.js","Components/TransportSelector.js","Components/PathSelector.js","Components/ResultBox.js","serviceWorker.js","index.js"],"names":["App","props","handlePathSelection","bind","changeTransport","fetchAddresses","initialize","changePath","clearAddresses","updateMessage","signMessage","state","addresses","basePath","publicKey","selectedPath","transportMethod","btc","index","message","signature","error","this","newPath","setState","newMessage","signMessageNew","Buffer","from","toString","result","console","log","method","TransportU2F","create","BTC","TransportWebAuthn","TransportWebUSB","path","getWalletPublicKey","response","amount","node","bip32","compressPublicKey","chainCode","childKey","child","addressesCopy","Array","tempIndex","i","derivePath","push","key","pubKey","balance","isSelected","onSelect","parseInt","charAt","substring","addressTable","messageForm","settings","resultBox","length","variant","onClick","addressList","value","onChange","onSubmit","className","React","Component","MessageForm","handleChange","handleSubmit","event","target","preventDefault","Group","as","Row","Label","column","sm","Control","rows","type","request","require","BitcoinAddress","handleSelect","pubKeyToAddress","fetchBalance","address","options","url","newBalance","body","Error","hex","replace","b","keyPair","bitcoinjs","fromPublicKey","p2pkh","pubkey","p2wpkh","p2sh","redeem","BitcoinAddressTable","loadMore","striped","bordered","hover","size","TransportSelector","PathSelector","ResultBox","generateSignature","v","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b8fcc05.chunk.js","sourcesContent":["import React from 'react';\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\nimport TransportWebAuthn from \"@ledgerhq/hw-transport-webauthn\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport BTC from \"@ledgerhq/hw-app-btc\";\nimport * as bip32 from 'bip32';\nimport { BIP32Interface } from 'bip32';\n\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\n\n\nimport './App.css';\n\nimport MessageForm from './Components/MessageForm';\nimport BitcoinAddress from './Components/BitcoinAddress';\nimport BitcoinAddressTable from './Components/BitcoinAddressTable';\nimport TransportSelector from './Components/TransportSelector';\nimport PathSelector from './Components/PathSelector';\nimport ResultBox from './Components/ResultBox';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.handlePathSelection = this.handlePathSelection.bind(this);\n    this.changeTransport = this.changeTransport.bind(this);\n    this.fetchAddresses = this.fetchAddresses.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.changePath = this.changePath.bind(this);\n    this.clearAddresses = this.clearAddresses.bind(this);\n    this.updateMessage = this.updateMessage.bind(this);\n    this.signMessage = this.signMessage.bind(this);\n\n\n    this.state = {\n      addresses: [],\n      basePath: \"44'/0'/0'\",\n      publicKey: \"\",\n      selectedPath: null,\n      transportMethod: null,\n      btc: null,\n      index: 0,\n      message: \"\",\n      signature: null,\n      error: null\n    };\n  }\n\n  async componentDidMount() {\n    this.changeTransport(\"webauthn\");\n  }\n\n  changePath(newPath){\n    this.setState({\n      basePath: newPath\n    }, () => { this.clearAddresses(); });\n  }\n\n  clearAddresses(){\n    this.setState({\n      addresses: [],\n      index: 0\n    })\n  }\n\n  updateMessage(newMessage){\n    this.setState({\n      message: newMessage\n    })\n  }\n\n  async signMessage(message){\n    try {\n      let result = await this.state.btc.signMessageNew(this.state.selectedPath, Buffer.from(this.state.message).toString(\"hex\"));\n      console.log(result);\n      this.setState({\n        signature: result\n      });\n    } catch (error) {\n      this.setState({\n        error: error\n      });\n    }\n  }\n\n  async changeTransport(method){\n    switch(method){\n      case \"u2f\":\n      this.setState({\n        transportMethod: await TransportU2F.create(),\n      }, () => {\n        this.setState({\n          btc: new BTC(this.state.transportMethod)\n        }, () => { this.clearAddresses(); })\n      });\n        break;\n      case \"webauthn\":\n      this.setState({\n        transportMethod: await TransportWebAuthn.create(),\n      }, () => {\n        this.setState({\n          btc: new BTC(this.state.transportMethod)\n        }, () => { this.clearAddresses(); })\n      });\n        break;\n      case \"webusb\":\n      this.setState({\n        transportMethod: await TransportWebUSB.create(),\n      }, () => {\n        this.setState({\n          btc: new BTC(this.state.transportMethod)\n        }, () => { this.clearAddresses(); })\n      });\n        break;\n      default:\n        break;\n    }\n  }\n\nhandlePathSelection(path){\n    this.setState({\n    selectedPath: path\n  });\n}\n\nasync initialize(){\n  let response = await this.state.btc.getWalletPublicKey(this.state.basePath);\n  this.setState({\n    publicKey: response\n  }, () => {\n    this.fetchAddresses(10);\n  });\n}\n\nasync fetchAddresses(amount){\n  let node: BIP32Interface = bip32.fromPublicKey(Buffer.from(\n  this.compressPublicKey(this.state.publicKey), 'hex'),\n  new Buffer.from(this.state.publicKey.chainCode, 'hex'));\n\n  let childKey = \"\";\n  let path = \"\";\n  let child = null;\n  let addressesCopy = Array.from(this.state.addresses);\n  let tempIndex = this.state.index;\n\n  for(let i = 0; i < amount; i++){\n    path = this.state.basePath + \"/0/\" + tempIndex;\n    child = node.derivePath(\"0/\" + tempIndex);\n    childKey = Buffer.from(child.publicKey).toString('hex');\n    addressesCopy.push(<BitcoinAddress key={path}\n                    pubKey={childKey}\n                    path={path}\n                    balance={0}\n                    isSelected={this.state.selectedPath === path ? true : false}\n                    onSelect={this.handlePathSelection}\n                    />);\n    tempIndex++;\n  }\n  this.setState({\n    index: tempIndex,\n    addresses: addressesCopy\n  });\n}\n\ncompressPublicKey(publicKey){\nlet suffix = parseInt(publicKey.publicKey.charAt(129), 16) % 2 === 0 ? \"02\" : \"03\";\nlet compressedKey = suffix + publicKey.publicKey.substring(2, 66);\nreturn compressedKey;\n}\n\nrender(){\n  let addressTable = null;\n  let messageForm = null;\n  let settings = null;\n  let resultBox = null;\n\n  if(this.state.addresses.length === 0){\n    settings =\n    <Jumbotron>\n      <PathSelector changePath={this.changePath} />\n      <TransportSelector changeTransport={this.changeTransport} />\n      <Button variant=\"primary\" onClick={this.initialize}>Start</Button>\n    </Jumbotron>\n  }\n\n  if(this.state.addresses.length > 0 && !this.state.selectedPath){\n    addressTable = <BitcoinAddressTable addressList={this.state.addresses} onClick={this.fetchAddresses}/>\n  }\n\n  if(this.state.selectedPath && !this.state.signature){\n    messageForm = <MessageForm value={this.state.message} onChange={this.updateMessage} onSubmit={this.signMessage} />\n  }\n\n  if(this.state.signature){\n    resultBox = <ResultBox signature={this.state.signature}/>;\n  }\n  return (\n    <Container className=\"App\">\n      <Jumbotron>\n        <h1>Leger Signing Tool</h1>\n      </Jumbotron>\n          {settings}\n          {addressTable}\n          {messageForm}\n          {resultBox}\n    </Container>\n\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\n\nclass MessageForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onChange(event.target.value);\n  }\n\n  handleSubmit(event) {\n    this.props.onSubmit(event.target.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <Jumbotron>\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Group as={Row}>\n              <Form.Label column sm=\"3\">Message</Form.Label>\n              <Col sm=\"9\">\n                <Form.Control as=\"textarea\" rows=\"3\" value={this.props.value} onChange={this.handleChange} />\n              </Col>\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\" value=\"submit\">Sign Now</Button>\n        </Form>\n      </Jumbotron>\n\n\n\n      //<form onSubmit={this.handleSubmit}>\n    //    <label>\n  //        Message:\n//          <input type=\"text\" value={this.props.value} onChange={this.handleChange} />\n        //</label>\n        //<input type=\"submit\" value=\"Submit\" />\n      //</form>\n    )\n  }\n}\n\nexport default MessageForm;\n","import React from 'react';\nimport * as bitcoinjs from 'bitcoinjs-lib';\nconst request = require(\"request\");\nclass BitcoinAddress extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.handleSelect = this.handleSelect.bind(this);\n    this.pubKeyToAddress = this.pubKeyToAddress.bind(this);\n    this.fetchBalance = this.fetchBalance.bind(this);\n\n    this.state = {\n      balance: \"loading...\",\n      address: this.pubKeyToAddress()\n    }\n  }\n\n  fetchBalance(){\n    let options = { method: 'GET', url: 'https://blockchain.info/q/addressbalance/' + this.state.address};\n    let newBalance = 0;\n    request(options, function (error, response, body) {\n      if (error) throw new Error(error);\n\n      newBalance = body;\n    });\n    this.setState({\n      balance: newBalance\n    })\n\n  }\n\n  componentDidMount(){\n    this.fetchBalance();\n  }\n\n  pubKeyToAddress(){\n    let hex = this.props.pubKey.replace(/^0x/, \"\");\n    let b = Buffer.from(hex, \"hex\");\n    let keyPair = bitcoinjs.ECPair.fromPublicKey(b);\n    let response;\n    switch(this.props.path.substring(0, 3)){\n      case \"44'\":\n        response = bitcoinjs.payments.p2pkh({ pubkey: keyPair.publicKey });\n        return response.address;\n      case \"84'\":\n        response = bitcoinjs.payments.p2wpkh({ pubkey: keyPair.publicKey });\n        return response.address;\n      case \"49'\":\n        response = bitcoinjs.payments.p2sh({\n          redeem: bitcoinjs.payments.p2wpkh({ pubkey: keyPair.publicKey }),\n        });\n        return response.address;\n      default:\n        break;\n    }\n  }\n\n  handleSelect(){\n    this.props.onSelect(this.props.path);\n  }\n\n  render() {\n    return (\n      <tr onClick={this.handleSelect}>\n        <td>\n          {this.state.address}\n        </td>\n        <td>\n          {this.props.path}\n        </td>\n        <td>\n          {this.state.balance}\n        </td>\n      </tr>\n    )\n  }\n}\n\nexport default BitcoinAddress;\n","import React from 'react';\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nclass BitcoinAddressTable extends React.Component {\n  constructor(props){\n    super(props);\n    this.loadMore = this.loadMore.bind(this);\n  }\n\n  loadMore(){\n      this.props.onClick(10);\n  }\n\n  render(){\n    if(this.props.addressList.length === 0){ return null; }\n    return (\n        <Jumbotron>\n          <p>\n            Please select the address you wish to use from the list below:\n          </p>\n\n        <Table striped bordered hover size=\"sm\">\n          <thead>\n            <tr>\n              <th>Address</th>\n              <th>Path</th>\n              <th>Balance</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.addressList}\n          </tbody>\n        </Table>\n        <Button variant=\"info\" onClick={this.loadMore}>Load more</Button>\n        </Jumbotron>\n    )\n  }\n}\n\nexport default BitcoinAddressTable;\n","import React from 'react';\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\nclass TransportSelector extends React.Component {\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event){\n    this.props.changeTransport(event.target.value);\n  }\n\n  render(){\n    return (\n      <Form.Group as={Row}>\n        <Form.Label column sm=\"3\">Transport Method</Form.Label>\n        <Col sm=\"9\">\n          <Form.Control as =\"select\" onChange={this.handleChange}>\n            <option value=\"webauthn\">WebAuthN</option>\n            <option value=\"u2f\">U2F</option>\n            <option value=\"webusb\">WebUSB</option>\n          </Form.Control>\n        </Col>\n      </Form.Group>\n    )\n  }\n}\n\nexport default TransportSelector;\n","import React from 'react';\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n\nclass PathSelector extends React.Component {\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event){\n    this.props.changePath(event.target.value);\n  }\n\n  render(){\n    return (\n        <Form.Group as={Row}>\n          <Form.Label column sm=\"3\">Wallet Type</Form.Label>\n          <Col sm=\"9\">\n            <Form.Control as=\"select\" onChange={this.handleChange}>\n              <option value=\"44'/0'/0'\">Legacy (44'/0'/0')</option>\n              <option value=\"49'/0'/0'\">P2SH-Segwit (49'/0'/0')</option>\n              <option value=\"84'/0'/0'\">Native Segwit (84'/0'/0')</option>\n            </Form.Control>\n          </Col>\n        </Form.Group>\n    )\n  }\n}\n\nexport default PathSelector;\n","import React from 'react';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nclass ResultBox extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.generateSignature = this.generateSignature.bind(this);\n  }\n\n  generateSignature(){\n    let response = this.props.signature;\n    let v = response['v'] + 27 + 4;\n    let signature = Buffer.from(v.toString(16) + response['r'] + response['s'], 'hex').toString('base64');\n    return signature;\n  }\n\n  render(){\n    return (\n      <Jumbotron>\n        <p>Signature: {this.generateSignature()}</p>\n      </Jumbotron>\n\n    )\n  }\n}\n\nexport default ResultBox;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}